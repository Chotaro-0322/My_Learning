* SqueezeSegの論文　要点まとめ
  URL : https://arxiv.org/pdf/1710.07368.pdf

  * アブストラクト
    この論文では3D Lidarからの交通物体のセマンティックセグメンテーションを行う.
    特に車や自転車, 歩行者の分類を行う. ポイントごとの分類問題を使用し, CNNをベースにしたend-to-endのSqueezeSegと呼ばれるネットワークの提案を行う.
    CNNはLiDARポイントクラウドをを入力として扱い, 直接ポイントごとのラベルマップを形成する. これを行う上でCRFを使用する.
    (CRF: ポイントクラウドのポイント同士の関わりを確率で表し, ポイントごとのクラス確率を求める?)
    インスタンスレベルのラベルは従来のクラスタリングアルゴリズムを使用する.
    CNNモデルはKITTIデータセットのLiDARポイントクラウドでトレーニングされており、ポイントごとのセグメンテーションラベルはKITTIの3Dバウンディングボックスから派生しています。
    この手法はとても早い
    
  * イントロダクション
    この手法は, CRFモデルによってさらに洗練されています。次に、カテゴリ内のポイントに従来のクラスタリングアルゴリズム（DBSCANなど）を適用することにより、インスタンスレベルのラベルが取得されます。
    使用するのは
    まずはSqueezeSeg
    それをCRFモデルにより洗練
    さらに従来のクラスタリングアルゴリズムをくっつけることで実用レベルにまで持っていく.

    3Dポイントクラウドを2DCNNに持っていくために, 球体の投影を採用してまばらで不規則に分布した3D点群を密集した2Dグリッド表現に変換します.
    提案されたCNNモデルはSqueezeNet(元祖)からインスピレーションを得て, メモリ要件を減らしつつターゲットの組み込みアプリケーションのリアルタイム推論速度を達成することを目的ととして, 計算の複雑さを減らすように注意深く設計されています.
    よって, あまりネットワークをいじるのは良くない?

    CRFモデルは以下のRNNモデルのように再定式化されCNNモデルと一緒にend-to-endでトレーニングを行える.
    S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet, Z. Su, D. Du,C.  Huang,  and  P.  H.  Torr,  “Conditional  random  fields  as  recurrentneural networks,” inProceedings of the IEEE International Conferenceon Computer Vision, 2015, pp. 1529–1537

  * メソッドの説明
    1) ポイントクラウドの変換
       従来のCNNモデルは, サイズH*W*3の3次元テンソルで表すことができる画像のためにあった. 最初の2次元は画像の縦と幅にエンコードする.
       最後の1次元は一般的にはRGBの値を使用する. しかし, 3DLidarポイントクラウドは通常デカルト座標(x, y, z)のセットとして表される. 
       また, 追加で反射強度やRGBの値を含むこともできる. イメージピクセルと違い, Lidarのポイントクラウドはまばらで不規則である.
       したがって, 単純にボクセルに離散化(3D空間をx, y, xに細かく刻んで表現)すると, 空のボクセルが大量に発生する.
       よりコンパクトな表現を取得するために, LiDAR点群を球に投影し より密度の高いグリッドベースの表現を作成します.

       [[file:~/ピクチャ/Screenshot from 2021-04-01 15-22-34.png]]
      
       [[file:~/ピクチャ/Screenshot from 2021-04-01 15-25-26.png]] 
     
       図２に示すとおり,
       φは横方向の角度, θは縦方向の角度
       Δφは横方向の解像度, Δθは縦方向の解像度
       これにより, H*W*Cの3Dテンソルを作ります.
       この論文ではH=64, 90°を512分割(W = 512)
       Cはこの論文では5つの特徴量を使用します.
       1~3つ目はデカルト座標(x, y, z)
       4つ目は反射強度
       5つ目は距離 r = √(x^2 + y^2 + z^2)

    2) ネットワークの構造
      [[file:~/ピクチャ/sss.png]]

      畳み込みニューラルネットワークの構造を図3に示す.
      SqueezeSegはSqueezeNetから派生している. これは1/50のパラメータでAlexNetレベルの精度を達成した軽量のCNN
      SqueezeSegの入力は64*512*5テンソル. SqueezeSegからレイヤー(Conv1 to fire9)を移植した.
      SqueezeNetは幅と高さ両方の中間フィーチャーマップのダウンサンプリングを行うためにマックスプーリングを行います.
      しかし, 入力テンソルの高さは幅よりも遥かに小さいため, 幅をダウンサンプリングするだけです.
      fire9の出力は, ポイントクラウドのセマンティクスをエンコードするダウンサンプリングされたフィーチャーマップです.
      各ポイントのフル解像度のラベル予測を取得するために, デコンボリューションモジュール(転置コンボリューション)を使用して, 幅次元の特著マップをアップサンプリングします.

      くわえて, 最初の方の同じサイズのフィーチャーマップをアップサンプリングフィーチャーマップへ追加する.
      出力確率マップはsoftmaxactivationを使用した畳み込みそう(conv14)によって生成される.
      確率マップは, 次のセクションで説明する反復CRFレイヤーによって更に洗練される.
      計算量を軽減するために, 畳み込み層を逆畳み込み層をafireModulesとfireDeconvsに置き換えた.

      
      [[file:~/ピクチャ/Screenshot from 2021-04-01 16-52-12.png]]
  　　
      fireModulesとfireDeconvsのモジュールのアーキテクチャを図4に示した.
      fireModulesでは, H*W*Cサイズの入力テンソルが最初に1*1の畳み込みそうに供給されチャンネルサイズがC/4に減少する.
      次に, 3*3コンボリューションを使用して空間情報を融合する. それと並行して1*1の畳み込みとともに, Cのチェンネルサイズを回復する.
      1*1畳み込みはSqueezeレイヤーと呼ばれ, 並列の1*1と3*3畳み込みは一緒に拡張レイヤーと呼ばれる.

      afireDeconvModuleでは, フィーチャーマップのアップサンプリングに使用されるdeconvlayerとSqueezeレイヤーとExpandレイヤーの間に配置される.
      
   3) CRF (onditional Random Field)
      画像セグメンテーションではCNNモデルによって予測されたラベルマップの境界がぼやける傾向にある.
      これは, 最大プーリングなどのダウンサンプリング操作で低レベルの詳細が失われるためです. 同様の現象はSqueezeSegでも観察される.
      正確なポイントごとのラベル予測には, オブジェクトとシーンの高レベルのセマンティックだけではなく, 低レベルの詳細も理解する必要がある.
      後者はラベル割りあての一貫性にとって非常に重要です.
      例えば, クラウド内の2つのポイントがお互いに隣接していて, 強度の測定値が類似している場合, それらは同じオブジェクトに属しているため, 同じラベルを持っている可能背がある.
      CRFを使用して, CNNによって生成されたラベルマップを改良した.
      与えられた点群とラベル予測について, i番目のポイントの予測ラベルを示します. CRFモデルはエネルギー関数を使用する.
      [[file:~/ピクチャ/Screenshot from 2021-04-01 17-15-52.png]]
      ui(ci) = -logP(ci) : CNN分類器からのP(ci)を考慮する.

      ２つめの項は類似点のペアに異なるラベルを割り当てるための"ペナルティ"と定義する.
      [[file:~/ピクチャ/Screenshot from 2021-04-01 17-33-50.png]]

      [[file:~/ピクチャ/Screenshot from 2021-04-01 17-35-52.png]]

      式(2)のエネルギー関数が最小化するとラベルの割当が制限される.

      式(2)の正確な最小化は手に負えない, しかしそれを近似的かつ効率的に解くために, mean-field iteration アルゴリズムを提案した. 以下にその文献.
      P.  Kr ̈ahenb ̈uhl  and  V.  Koltun,  “Efficient  inference  in  fully  connectedcrfs with gaussian edge potentials,” inAdvances in neural informationprocessing systems, 2011, pp. 109–117
      mean-field iterationアルゴリズムをRNNとして再定式化した.
      S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet, Z. Su, D. Du,C.  Huang,  and  P.  H.  Torr,  “Conditional  random  fields  as  recurrentneural networks,” inProceedings of the IEEE International Conferenceon Computer Vision, 2015, pp. 1529–1537.

      図5に示すとおり, RNNモジュールとしてmean-field iterationの実装についてまとめる.

      [[file:~/ピクチャ/Screenshot from 2021-04-01 17-43-03.png]]

      CNNモデルの出力は, 初期確率マップとしてCRFモジュールに送られる. 次に式(3)のように入力特徴に基づいてガウスカーネルを計算する.
      （ガウスカーネルはpi と pjの近さを表す. 少し離れればすぐに値は減少する）
      上記のガウスカーネルの値は, 2点間の距離(3Dガウシアン空間と2D角度空間)が増加するにつれて非常に早く低下する.
      したがって, 各点についてカーネルサイズを入力テンソル上の3×5の小さな領域に制限する. (CNNによる抽象化をしすぎない?)
      
      次に, 上記のガウスカーネルを使用して初期確率マップをフィルタリングします.
      このステップは, 本質的に隣接ポイントの確率を集約するために, 論文[11]でのメッセージパッシングとも呼ばれる.
      
      このステップは、上記のガウスカーネルをパラメーターとして使用して、ローカルに接続されたレイヤーとして実装できます。
      次に、集計された確率に重みを付け、「互換性変換」を使用して、各ポイントの分布をどの程度変化させるかを決定します。
      このステップは、トレーニング中にパラメータが学習される1x1畳み込みとして実装できます。
      次に、初期確率を1x1畳み込みの出力に追加して更新し、softmaxを使用して正規化します。
      モジュールの出力は洗練された確率マップであり、この手順を繰り返し適用することでさらに洗練されます。
      私たちの実験では、正確なラベルマップを実現するために3回の反復を使用しました。
      この反復CRFモジュールとCNNmodelは、エンドツーエンドで一緒にトレーニングできます。
      単一のステージパイプラインを使用して、マルチステージワークフローに存在する伝播エラーのスレッドを回避し、
      それに応じてコンテキスト情報を活用します。

      [自分なりの理解]
      LiDARののデータをガウシアンフィルタを行う(画像処理でやったやつ).　←ガウスカーネルはまた別物
      ↓
      Re-weighting & compatibility transformation as a 1*1 conv layer
      再度重み付けして, 1*1レイヤーとしての互換性変換
      

   4) データ収集
      LiDARスキャンと3Dバウンディングボックスが含まれているKITTIデータを使用した. ポイントごとのアノテーションは3Dバウンディングボックスからコンバートされている,
      ターゲットとなる3Dバウンディングボックスに含まれるすべてのポイントはターゲットオブジェクトの一部だと考えられる.
      次にそれぞれのポイントごとへラベル付けを行う.
      このような変換の例を図2(A, B)に示します. このアプローチを使用して, ポイントワイズラベル付きの10,858枚の画像を収集しました.

      より多くのトレーニングサンプルを得るために, GTA-VのLiDARシミュレーターを使用した.
      以下, GTA-Vのデータセットの工夫.
      
      
 * 精度
   [[file:~/ピクチャ/Screenshot from 2021-04-03 14-52-40.png]]
